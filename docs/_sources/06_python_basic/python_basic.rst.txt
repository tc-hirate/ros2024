.. role:: red

============================================================
Python入門
============================================================

Pythonの基本的な構文を学習します。

|

Pythonの実行
============================================================

ターミナルから「python3」と入力するとインタラクティブシェルが起動します。

.. code-block:: console

    ubuntu@mbc084:~$ python3
    Python 3.10.6 (main, May 29 2023, 11:10:38) [GCC 11.3.0] on linux
    Type "help", "copyright", "credits" or "license" for more information.

インタラクティブシェルの実行中は、先頭に「>>>」という記号が表示されます。

.. code-block:: python

    >>> 

インタラクティブシェルを終了するときは「quit()」と入力します。

.. code-block:: python

    >>> quit()

「python」と入力するとエラーになりますので注意してください。

.. code-block:: console

    ubuntu@mbc084:~$ python
    コマンド 'python' が見つかりません。もしかして:
      command 'python3' from deb python3
      command 'python' from deb python-is-python3

|

文字列の出力
============================================================

「print」を用いると文字を出力することができます。
printの後ろの()の中に書いた文字が画面に出力されます。

.. code-block:: python

    >>> print('Hello ROS')
    Hello ROS

|

文字列
============================================================

「Hello ROS」という文字は「文字列」と呼ばれます。
文字列はシングルクォーテーション「'」 またはダブルクォーテーション「"」で囲みます。
どちらかで囲んでいない場合は、エラーになります。

.. code-block:: python

    >>> print('Hello ROS')      # シングルクォーテーションで囲む
    Hello ROS
    >>> print("Hello ROS")      # ダブルクォーテーションで囲む
    Hello ROS
    >>> print(Hello ROS)
      File "<stdin>", line 1
        print(Hello ROS)
              ^^^^^^^^^
    SyntaxError: invalid syntax. Perhaps you forgot a comma?

|

コメント
============================================================

コード内にはコメントを書くことができます。
行頭に「#」を書くことで、行末までコメントとみなされます。
コメントはコードが実行されるときにすべて無視されます。

|

数値
============================================================

数値は文字列と違ってクォーテーションで囲む必要がありません。
数学と同じ記号「+」や「-」を使って、足し算や引き算をすることができます。
数値や記号はすべて半角で書きます。

.. code-block:: python

    >>> print(3)
    3
    >>> print(5 + 9)        # 足し算
    14
    >>> print(100 - 7)      # 引き算
    93
    >>> print(6 * 7)        # 掛け算
    42
    >>> print(9 / 5)        # 割り算
    1.8
    >>> print(9 // 5)       # 割り算の商
    1
    >>> print(9 % 5)        # 割り算の余り
    4

|

文字列と数値の違い
============================================================

「9 + 5」は計算結果である「14」が出力されます。
「'9 + 5'」のようにクォーテーションで囲むと、そのまま「'9 + 5'」が出力されます。

.. code-block:: python

    >>> print(9 + 5)
    14
    >>> print('9 + 5')
    9 + 5

|

変数
============================================================

変数とは、データ（値）を入れておく箱のようなものです。
この変数に名前をつけることで、
その名前を用いて変数に値を入れることや変数から値を取り出すことができます。

変数を用いるためには、まず変数を定義する必要があります。
変数は「変数名 = 値」のように定義します。
プログラミングの「=」は「等しい」ではなく「右辺を左辺に代入する」という意味になります。

.. code-block:: python

    >>> name = 'zumo'
    >>> print(name)         # 変数nameの値
    zumo
    >>> print('name')       # 「name」という文字列
    name

変数名には大文字小文字のアルファベット（A-Z、a-z）、数字（0-9）、アンダースコア（_）が使えます。
ただし、数字は変数名の1文字目に使うことはできません。

|

if文
============================================================

if文を用いると、「もし○○ならば☓☓を行う」という条件分岐が可能になります。
if文は、ifの後に条件式を指定し、その条件が成り立つときに実行する処理を次の行に書きます。

条件式の中では、2つの値を比較するための記号「比較演算子」がよく使われます。
「x == y」は左右の値が等しいときに成立、「x != y」は左右の値が等しくないときに成立します。

条件式の部分は「if 条件式:」のように行末にコロンをつけます。

if文の条件式が成立したときの処理を書くときには、インデント（字下げ）をします。

.. code-block:: console

    >>> x = 2
    >>> if x == 2:
    ...     print('数値は2です。')
    ... 
    数値は2です。
    >>> if x % 2 == 0:
    ...     print('数値は偶数です。')
    ... 
    数値は偶数です
    >>> if x % 2 == 1:
    ...     print('数値は奇数です。')
    ... 
    >>>

if文の比較演算子を用いた条件式の部分を出力してみると「True」が出力されます。

.. code-block:: console

    >>> print(x == 2)
    True

出力された「True」は真偽値とよばれるものです。
真偽値を扱うデータ型「真偽値形」には「True」と「False」の2つの値があります。
比較演算子を用いた演算子の部分が成り立つときは「True」、成り立たないときは「False」となります。

if文では条件式が「True」のときには処理が実行され、「False」のときには処理は実行されません。

比較演算子には、「==」、「!=」以外にも値の大小を比較する「<」、「<=」、「>」、「>=」があります。

if文に「else」を組み合わせることで
「もし○○ならば☓☓を行う、そうでなければ△△を行う」という条件分岐ができるようになります。
if文の条件がFalseのとき、elseの処理が実行されます。

.. code-block:: console

    >>> x = 5
    >>> if x % 2 == 0:
    ...     print('xは偶数です。')
    ... else:
    ...     print('xは奇数です。')
    ... 
    xは奇数です。

if文で、条件が成り立たなかった場合を複数定義したい場合は、「elif」を用います。
「elif」を用いると、「もし○○ならば☓☓を行う、 △△ならば▲▲を行う、そうでなければ□□を行う」
という処理ができるようになります。

elifはいくつでも書くことができますが、上から順に条件が成り立つか判断され、
最初に条件に合致した部分の処理だけが行われます。

.. code-block:: console

    >>> x = 100
    >>> if x == 10:
    ...     print('10')
    ... elif x == 20:
    ...     print('20')
    ... else:
    ...     print('分かりません')
    ... 
    分かりません

複数の条件を組み合わせるときは「and」、「or」を用います。
「条件1も条件2も成り立つ」というような場合の条件式は、
「and」を用いて「条件1 and 条件2」のように書きます。
「条件1か条件2が成り立つ」というような場合の条件式は、
「or」を用いて「条件1 or 条件2」のように書きます。

.. code-block:: console

    >>> time = 15
    >>> if time > 9 and time < 18:
    ...     print('就業時間です。')
    ... 
    就業時間です。
    >>> time = 20
    >>> if time < 9 or time > 18:
    ...     print('就業時間ではありません。')
    ... 
    就業時間ではありません。

「not」を用いると条件の否定をすることができます。
「not 条件式」のようにすると、 条件式が「True」であれば全体が「False」に、
「False」であれば「True」になります。

.. code-block:: console

    >>> time = 15
    >>> if not time == 18:
    ...     print('退社時刻ではありません。')
    ... 
    退社時刻ではありません。

|

リスト
============================================================

複数のデータをまとめて管理するにはリストというものを用います。
リストは[要素1, 要素2, ...]のように作ります。
リストに入っている値のことを要素と呼びます。
リストを使うと、複数の文字列や複数の数値を1つのものとして管理することができます。

.. code-block:: console

    >>> ['pasta', 'curry', 'sushi']
    ['pasta', 'curry', 'sushi']
    >>> [1, 2, 3, 5, 8, 13, 21]
    [1, 2, 3, 5, 8, 13, 21]

リストも1つの値なので変数に代入することができます。
このとき、リストを代入する変数名は慣習上複数形にすることが多いです。

.. code-block:: console

    >>> foods = ['pasta', 'curry', 'sushi']
    >>> print(foods)
    ['pasta', 'curry', 'sushi']

リストの要素には、前から順番に「0, 1, 2, ...」と数字が割り振られています。
これをインデックス番号といいます。
インデックス番号は0から始まる点に注意してください。
リストの各要素は、リスト[インデックス番号]とすることで取得することができます。

.. code-block:: console

    >>> foods = ['pasta', 'curry', 'sushi']
    >>> print('好きな食べ物は' + foods[2] + 'です')
    好きな食べ物はsushiです

「リスト[インデックス番号] = 値」とすることで、
リストの指定したインデックス番号の要素を更新することができます。

.. code-block:: console

    >>> foods = ['pasta', 'curry', 'sushi']
    >>> foods[1] = 'pizza'
    >>> print(foods)
    ['pasta', 'pizza', 'sushi']

「リスト.append(値)」とすることで、
すでに定義されているリストの末尾に新たな要素を追加することができます。

.. code-block:: console

    >>> foods = ['pasta', 'curry', 'sushi']
    >>> foods.append('pizza')
    >>> print(foods)
    ['pasta', 'curry', 'sushi', 'pizza']


|

for文
============================================================

for文を使うと、リストの要素を順に取り出して処理を行うことができます。
「for 変数名 in リスト:」と書くことで、リストの要素数だけ処理を繰り返すことができます。

.. code-block:: console

    >>> foods = ['pasta', 'curry', 'sushi']
    >>> for food in foods:
    ...     print('好きな食べ物は' + food + 'です')
    ... 
    好きな食べ物はpastaです
    好きな食べ物はcurryです
    好きな食べ物はsushiです

|

辞書
============================================================

辞書は、リストと同じように複数のデータをまとめて管理するのに用いられます。
リストとの違いは、個々の要素をインデックス番号ではなくキーと呼ばれる名前を付けて管理する点です。
辞書ではキーと値のペアが1つの要素となります。

辞書は{キー1:値1, キー2:値2, ...}のように作ります。
ほとんどの場合、キーには文字列が使われます。
リストは要素を[]で囲みましたが、 辞書では{}で囲みます。
キーと値の間はコロン(:)、要素同士の間はコンマ(,)で区切ります。

.. code-block:: console

    >>> fruits = {'apple':'red', 'banana':'yellow', 'grape':'purple'}
    >>> print(fruits)
    {'apple': 'red', 'banana': 'yellow', 'grape': 'purple'}

辞書の値を取り出すには、取り出したい値に対応する「キー」を用いて辞書名[キー]のように書きます。

.. code-block:: console

    >>> fruits = {'apple':'red', 'banana':'yellow', 'grape':'purple'}
    >>> print('appleの色は' + fruits['apple'] + 'です')
    appleの色はredです

|

while文
============================================================

繰り返し処理にはfor文以外にもwhile文というものがあります。
while文を用いると、「ある条件に当てはまる間、処理を繰り返す」といったことが可能になります。

while文は「while 条件式:」のように書きます。
条件式の結果がTrueの間、while文内の処理を繰り返します。

.. code-block:: console

    >>> x = 1
    >>> while x <= 10:
    ...     print(x)
    ...     x += 1
    ... 
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10

|

break
============================================================

breakを用いると繰り返し処理を終了することができます。
if文などの条件分岐と組み合わせて使います。
while文でも同じように使うことができます。

.. code-block:: console

    >>> numbers = [1, 2, 3, 4, 5, 6]
    >>> for number in numbers:
    ...     print(number)
    ...     if number == 3:
    ...             break
    ... 
    1
    2
    3

|

continue
============================================================

繰り返し処理を終了するbreakと違い、continueはその周の処理だけをスキップすることができます。
continueもif文などと組み合わせて利用します。
while文でも同じように使うことができます。

.. code-block:: console

    >>> numbers = [1, 2, 3, 4, 5, 6]
    >>> for number in numbers:
    ...     if number % 2 == 0:
    ...             continue
    ...     print(number)
    ... 
    1
    3
    5

|

関数
============================================================

printの他にもPythonにはいくつかの便利な関数が用意されており、
それらを使うと様々な処理を簡単に行うことができます。
また、関数は自分で作ることもできます。
これらの関数を組み合わせることで、プログラムを効率的に作ることができます。

関数は「def 関数名():」のように定義します。
関数の処理の内容は、インデントして書いていきます。

.. code-block:: console

    >>> def hello():
    ...     print('Hello World')
    ... 
    >>> hello()
    Hello World

|

引数
============================================================

関数を呼び出す際に、関数に値を渡すことができます。
この値のことを引数といい、引数を渡すと関数の中でその値を利用することができるようになります。
関数に引数を渡せると、その値によって関数の処理結果を変えることができるので便利です。

関数に引数を渡すには、まず引数を受け取れる関数を定義しなければなりません。
そのためには、関数の定義部分で引数を受け取るための箱となる変数（仮引数）を指定します。

関数に引数を渡すには、関数名(引数)として関数を呼び出します。
渡された引数は、関数の仮引数に代入され、その値を関数の処理の中で用いることができます。

.. code-block:: console

    >>> def hello(name):
    ...     print('Hello ' + name)
    ... 
    >>> hello('Hirate')
    Hello Hirate
    >>> hello('ROS')
    Hello ROS

|

スコープ
============================================================

変数には、その変数が使える範囲が存在します。
その範囲のことをスコープと呼びます。
仮引数や関数の中で定義した変数のスコープは関数の中だけとなります。
よって、その変数を関数の外で使うことはできません。

.. code-block:: console

    >>> def hello(name):
    ...     print(name)
    ... 
    >>> print(name)
    Traceback (most recent call last):
    File "", line 1, in 
    NameError: name 'name' is not defined

|

複数の引数を持つ関数
============================================================

引数は複数渡すこともできます。
関数が複数の引数を受け取るためには、仮引数をコンマ(,)で区切って定義します。
引数を受け取る順番は自由に決めることができます。
また、引数は左から順番に「第1引数、第2引数、・・・」というように呼びます。

.. code-block:: console

    >>> def hello(name, message):
    ...     print(name + 'さん、' + message)
    ... 
    >>> hello('ヒラテ', 'こんにちは')
    ヒラテさん、こんにちは

|

引数の初期値
============================================================

引数には初期値を設定することもできます。
引数が省略されたとき、初期値が与えられていれば変わりの値として初期値が使われます。

.. code-block:: console

    >>> def hello(name, message='こんにちは'):
    ...     print(name + 'さん、' + message)
    ... 
    >>> hello('ひさ', 'こんばんは')
    ひささん、こんばんは
    >>> hello('のり')
    のりさん、こんにちは

|

戻り値
============================================================

処理した結果を呼び出し元に返すことができます。
これを戻り値と呼びます。
「return 戻り値」と書くことで戻り値を呼び出し元に返すことができます。

.. code-block:: console

    >>> def hello(name, message):
    ...     return name + 'さん、' + message
    ... 
    >>> my_message = hello('ヒラテ', 'こんにちは')
    >>> print(my_message)
    ヒラテさん、こんにちは

|

モジュール
============================================================

モジュールとは、Pythonのコードが書かれたファイルのことです。
別ファイルをモジュールとして読み込むことで、そこに書かれたコードを利用することができます。

「my_module.py」というファイルを作って、 次のコードを書いてください。

.. code-block:: python

    def hello(name, message):
        return name + 'さん、' + message

このモジュールを使ってみましょう。

.. code-block:: console

    >>> import my_module
    >>> my_message = my_module.hello('ヒラテ', 'こんにちは')
    >>> print(my_message)
    ヒラテさん、こんにちは

次のように書くこともできます。

.. code-block:: console

    >>> import my_module as mm    # 別名によるモジュールのインポート
    >>> my_message = mm.hello('ヒラテ', 'こんにちは')
    >>> print(my_message)
    ヒラテさん、こんにちは

    >>> from my_module import hello    # 必要なものだけをインポート
    >>> my_message = hello('ヒラテ', 'こんにちは')
    >>> print(my_message)
    ヒラテさん、こんにちは

|

クラスの定義
============================================================

プログラミングで「もの」を生成するには、まずその「設計図」を用意する必要があります。
「設計図」のことをクラス、「もの」のことをインスタンスと呼びます。

インスタンスは次の流れに沿って生成していきます。
①クラスを用意する
②クラスからインスタンスを生成する
③インスタンスに情報を追加する

クラスは「class クラス名:」とすることで定義できます。
また、クラス名は「MenuItem」のように大文字で始まるようにしましょう。

.. code-block:: console

    >>> class MenuItem:

クラスの中身（設計図の内容）は「class MenuItem:」より後の行で、インデントをして書いていきます。
今回はまだ処理を追加する必要がないので、
「pass」と書きましょう（これは何も処理がないことを表しています）。

.. code-block:: console

    >>> class MenuItem:
    ...     pass

次のように「クラス名()」とそのクラスを呼び出すことで、
クラス（設計図）を用いて新しくインスタンスを生成することができます。
また、「変数名 = クラス名()」とすることで、生成したインスタンスを変数に代入することができます。

.. code-block:: console

    >>> menu_item1 = MenuItem()

それぞれのインスタンスには、自由に様々な情報を追加することができます。
次のように「menu_item1.name = '○○'」とすることで、
「menu_item1」に「name」が「○○」であるという情報を追加することができます。
このとき、「name」のことを「インスタンス変数」と呼びます。

.. code-block:: console

    >>> menu_item1.name = "Hamburger"

また、「インスタンス.インスタンス変数」とすることで、
そのインスタンス変数を用いることができます。

.. code-block:: console

    >>> print(menu_item1.name)
    Hamburger

|

メソッド
============================================================

クラスの中に関数を定義することができます。
クラスの中で定義した関数のことをメソッドと呼びます。
メソッドの定義の方法は通常の関数と同じですが、第1引数にselfを追加する必要があります。

第1引数に指定したselfには、そのメソッドを呼び出したインスタンス自身が代入されます。

.. code-block:: console

    >>> class MenuItem:
    ...     def info(self):
    ...         print(self.name)
    ... 
    >>> menu_item1 = MenuItem()
    >>> menu_item1.name = "Hamburger"
    >>> menu_item1.info()
    Hamburger

|

__init__メソッド
============================================================

__init__メソッドは「クラス名()」でインスタンスが生成した直後に自動で呼ばれます。

.. code-block:: console

    >>> class MenuItem:
    ...     def __init__(self):
    ...         print("メニューが作られました")
    ... 
    >>> menu_item1 = MenuItem()
    メニューが作られました

__init__メソッドは引数を受け取ることもできます。

.. code-block:: console

    >>> class MenuItem:
    ...     def __init__(self, name):
    ...         self.name = name
    ... 
    >>> menu_item1 = MenuItem('Hamburger')
    >>> print(menu_item1.name)
    Hamburger

詳しくは、 `Pythonチュートリアル <https://docs.python.org/3/tutorial/>`_ を参照してください。
